c
params.permit(:version).deep_symbolize_keys
params.permit(:version).to_h.deep_symbolize_keys
params.permit(:version).to_unsafe_hash
params.permit(:version).to_h
params.permit(:version)
params.permit!
params.permit!(:version)
params.permit(:version)
c
Utils::Alexa::Request.new(params.to_hc)
Utils::Alexa::Request.new(params.to_h)
params.class
Utils::Alexa::Request.new({"version"=>"1.0"})
Utils::Alexa::Request.new({:version => '1.0'})
Utils::Alexa::Request.new({version: '1.0'})
params.to_h[:version]
Utils::Alexa::Request.new(params.to_h)
params.to_h
params[:version]
Utils::Alexa::Request.new(params)
c
Utils::Alexa::Request.new(params)
c
params.class
params[:version]
c
params
c
params.permit(:version, :session => {}, :context => {}, :request => {})[:context][:System][:apiAccessToken]
params.permit(:version, :session => {}, :context => {}, :request => {})[:context]
params.permit(:version, :session => {}, :context => {}, :request => {})[:context][:apiAccessToken]
params.permit(:version, :session => {}, :context => {}, :request => {})[:context][:System]
params.permit(:version, :session => {}, :context => {}, :request => {})[:context]
params.permit(:version, :session => {}, :context => {}, :request => {})[:version]
params.permit(:version, :session => {}, :context => {}, :request => {})['version']
params.permit(:version, :session => {}, :context => {}, :request => {})['vesrion']
params.permit(:version, :session => {}, :context => {}, :request => {})[:vesrion]
params.permit(:version, :session => {}, :context => {}, :request => {})
c
params.permit(:context => {})
params.permit(:context => [])
params.permit(:context)
params.permit(:version)
params.permit(:vesrion)
params.permit
params
c
params
post_params
params
c
continue
c
params
c
options
c
Services::CommunicationService.call(route: @program.routes[current_step])
c
@program.routes[current_step]
c
current_step
c
step
c
@data
program
c
Alexa::Program.first.name
Alexa::Program.first
Alexa::Program.count
@program_name
@program
c
@valuec
@value
c
@slot[:resolutionsPerAuthority]
@slot[:resolutions]
c
@slot
@alexa_response
c
slot_class
c
@slot[:name]
slot_class
c
@slot
c
request_example[:request][:type]
a[:request][:type]
a[:request] == request_example[:request]
a[:request]
a = alexa_request.as_json.deep_symbolize_keys
c
request_example[:context] == a[:context]
request_example[:session] == a[:session]
request_example[:session]
request_example
b = request_example
a = alexa_request.as_json.deep_symbolize_keys
ap request_example[:session].keys
ap request_example[:session],keys
ap request_example[:session]
ap alexa_request.as_json.deep_symbolize_keys[:session]
ap alexa_request[:session]
ap request_example
request_example
request_example[:request]
alexa_request.as_json.deep_symbolize_keys[:request][:new] == request_example[:request][:new]
alexa_request.as_json.deep_symbolize_keys[:request] == request_example[:request]
alexa_request.as_json.deep_symbolize_keys[:request][:new]
alexa_request.as_json.deep_symbolize_keys[:request] == request_example[:version]
c
alexa_request.as_json.deep_symbolize_keys[:version] == request_example[:version]
alexa_request.as_json.deep_symbolize_keys[:version]
alexa_request.as_json.deep_symbolize_keys
c
alexa_request.as_json['version']
alexa_request.as_json[:version]
alexa_request.as_json[:version] == request_example[:version]
alexa_request.as_json == request_example[:version]
alexa_request.as_json == request_example
alexa_request.as_json.class
alexa_request.as_json
c
alexa_request.as_json
alexa_request
c
@alexa_request.requestc
@alexa_request.request
c
request_example[:request][:intent][:name]
request_example[:request][:intent]
request_example[:request]
request_example
c
response_body
c
@intent.name
c
response_body
c
@alexa_request.request.intent
@alexa_request.request
@alexa_request
c
alexa_request.as_jsonc
alexa_request.as_json
c
pp alexa_request
p alexa_request
ap alexa_request
alexa_request
c
ap alexa_request
c
ap alexa_request
alexa_request
c
ap described_class
c
@alexa_request.request
@alexa_request.session
@alexa_request.version
@alexa_request.requestId
@alexa_request.
@request.requestId
@request
c
response_body
c
nil.fetch
{}.fetch
ap @alexa_request.version
ap @alexa_request
ap @alexa_request; c
c
cc
c
params
c
params
c
params
c
ap @alexa_requestc
ap @alexa_request
ap alexa_request
ap nil
c
@alexa_response.instance_of?(Hash)
@intent.instance_of?(Hash)
@intent
@alexa_response
c
response_body
c
cc
@request
c
JSON.parse(File.read('spec/fixtures/alexa/requests/request_example.json')).deep_symbolize_keys
JSON.parse(File.read('spec/fixtures/alexa/requests/request_example.json'))
File.read('spec/fixtures/alexa/requests/request_example.json')
File.read('spec/fixtures/requests/request_example.json')
JSON.parse(File.read('spec/fixtures/requests/request_example.json'))
JSON.parse(File.read('spec/fixtures/requests/request_example.json')).deep_symbolize_keys
JSON.parse(File.read('spec/file_fixtures/providers/blackhawk/product.json')).deep_symbolize_keys
c
response.body
response
c
response.code
c
response.statusc
response.status
c
response.status
response
c
response.status
c
response.status
response.code
response
c
